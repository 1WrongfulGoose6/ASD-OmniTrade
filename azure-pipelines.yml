      - job: Test
        displayName: 'Run Tests'
        steps:
          - task: UseNode@1
            inputs:
              version: '18.x'
            displayName: 'Use Node.js 18.x'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Prisma Client'
            inputs:
              key: 'prisma | "$(Agent.OS)" | prisma/schema.prisma'
              path: 'node_modules/.prisma'
              cacheHitVar: 'PRISMA_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Jest Coverage'
            inputs:
              key: 'jest-coverage | "$(Agent.OS)" | package-lock.json | $(Build.SourcesDirectory)/src/**'
              restoreKeys: |
                jest-coverage | "$(Agent.OS)" | package-lock.json
                jest-coverage | "$(Agent.OS)"
              path: 'coverage'
              cacheHitVar: 'COVERAGE_CACHE_RESTORED'

          - script: npm install
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'
            condition: ne(variables.PRISMA_CACHE_RESTORED, 'true')

          - script: npx prisma db push
            displayName: 'Set up Database Schema'

          - script: npx playwright install --with-deps chromium
            displayName: 'Install Playwright Chromium Browser'

          # Run Jest tests and produce junit XML for Azure
          - script: npm run test:coverage
            displayName: 'Run Jest Tests with Coverage (CI)'
            env:
              CI: true

          # Publish Jest results explicitly
          - task: PublishTestResults@2
            displayName: 'Publish Jest Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/jest-junit.xml'
              failTaskOnFailedTests: true

          # Run Playwright E2E tests
          - script: npm run test:e2e:ci
            displayName: 'Run Playwright E2E Tests (CI)'
            env:
              CI: true

          # Publish Playwright results explicitly
          - task: PublishTestResults@2
            displayName: 'Publish Playwright Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/JUnit_playwright-results.xml'
              failTaskOnFailedTests: true

          # Publish code coverage
          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Code Coverage Results'
            inputs:
              summaryFileLocation: 'coverage/cobertura-coverage.xml'
              pathToSources: 'src/'
              reportDirectory: 'coverage'
              failIfCoverageEmpty: false
