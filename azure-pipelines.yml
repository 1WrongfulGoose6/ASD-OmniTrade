## Author: Ali Bonagdaran

trigger:
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '20.x'
  HUSKY: '0'
  CI: 'true'
  NODE_OPTIONS: '--max-old-space-size=4096'  # Increase Node.js memory limit

stages:
  - stage: CI
    displayName: 'Continuous Integration'
    jobs:
      - job: Lint
        displayName: 'Lint Code'
        steps:
          - template: .azure/templates/setup-node.yml
          - script: npm run lint:ci || true
            displayName: 'Run ESLint with caching'
            env:
              NEXT_TELEMETRY_DISABLED: 1

      - job: SecurityAudit
        displayName: 'Security Audit'
        steps:
          - template: .azure/templates/setup-node.yml
          - script: npm audit --omit=dev
            displayName: 'Run npm audit for production dependencies'

      - job: UnitTests
        displayName: 'Unit Tests'
        steps:
          - template: .azure/templates/setup-node.yml
          - script: npm run test:coverage
            displayName: 'Run Unit Tests with Coverage'
            env:
              CI: 'true'
              NEXT_TELEMETRY_DISABLED: 1
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/**/*.xml'
              failTaskOnFailedTests: true
          - task: PublishCodeCoverageResults@2   # <-- fixed casing
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'coverage/cobertura-coverage.xml'
              pathToSources: 'src/'
              reportDirectory: 'coverage/'

      # Playwright E2E on main or when explicitly forced
      - job: E2ETests
        displayName: 'E2E Tests'
        condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['FORCE_E2E'], 'true'))
        steps:
          - template: .azure/templates/setup-node.yml
          - script: npx playwright install --with-deps chromium
            displayName: 'Install Playwright browsers'
          - script: npm run test:e2e:ci
            displayName: 'Run E2E Tests'
            env:
              CI: 'true'
              NEXT_TELEMETRY_DISABLED: 1
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/**/*.xml'
              failTaskOnFailedTests: true

      - job: Build
        displayName: 'Build Application'
        dependsOn:
          - Lint
          - UnitTests
          - SecurityAudit
        steps:
          - template: .azure/templates/setup-node.yml
          - task: Cache@2
            displayName: 'Cache Next.js build'
            continueOnError: true
            inputs:
              key: 'nextjs | "$(Agent.OS)" | package-lock.json'
              path: '.next/cache'
              restoreKeys: |
                nextjs | "$(Agent.OS)"
                nextjs
          - script: npm run build:ci
            displayName: 'Build Application'
            env:
              NEXT_TELEMETRY_DISABLED: 1
          - task: PublishPipelineArtifact@1
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
            inputs:
              path: '$(System.DefaultWorkingDirectory)'
              artifact: 'WebApp'
              publishLocation: 'pipeline'
            displayName: 'Publish build artifacts'

  - stage: Deploy
    displayName: 'Deploy to Production'
    dependsOn: CI
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: Production
        displayName: 'Deploy to Azure App Service'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: WebApp
                  displayName: 'Download build artifacts'

                # Install dependencies and run database migrations
                - task: UseNode@1
                  displayName: 'Use Node.js for deployment'
                  inputs:
                    versionSpec: '$(nodeVersion)'      # <-- fixed input name

                - script: |
                    cd $(Pipeline.Workspace)/WebApp
                    npm ci --only=production
                  displayName: 'Install production dependencies'

                - script: |
                    cd $(Pipeline.Workspace)/WebApp
                    echo "Configuring database connection..."
                    {
                      echo "DATABASE_URL=postgresql://$AZURE_POSTGRESQL_USER:$AZURE_POSTGRESQL_PASSWORD@$AZURE_POSTGRESQL_HOST:$AZURE_POSTGRESQL_PORT/$AZURE_POSTGRESQL_DATABASE?sslmode=require"
                      echo "NODE_ENV=production"
                      echo "PORT=8080"
                      echo "HOSTNAME=0.0.0.0"
                      echo "FINNHUB_API_KEY=$FINNHUB_API_KEY"
                    } > .env
                    echo "Database configuration complete"
                    # NOTE: consider NOT deleting migrations in production (see notes below)
                    echo "Clearing existing migrations for provider switch..."
                    rm -rf prisma/migrations
                    npx prisma generate
                    echo "Syncing schema with prisma db push..."
                    npx prisma db push --skip-generate
                  displayName: 'Run database migrations'
                  env:
                    AZURE_POSTGRESQL_HOST: $(AZURE_POSTGRESQL_HOST)
                    AZURE_POSTGRESQL_USER: $(AZURE_POSTGRESQL_USER)
                    AZURE_POSTGRESQL_PASSWORD: $(AZURE_POSTGRESQL_PASSWORD)
                    AZURE_POSTGRESQL_DATABASE: $(AZURE_POSTGRESQL_DATABASE)
                    AZURE_POSTGRESQL_PORT: $(AZURE_POSTGRESQL_PORT)
                    FINNHUB_API_KEY: $(FINNHUB_API_KEY)

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure App Service'
                  inputs:
                    azureSubscription: 'OmniTrade Connection'
                    appType: 'webAppLinux'
                    appName: 'OmniTrade'
                    package: '$(Pipeline.Workspace)/WebApp'
                    runtimeStack: 'NODE|20-lts'
                    startUpCommand: 'npm start'
                    appSettings: |
                      -NODE_ENV production
                      -PORT 8080
                      -DATABASE_URL "postgresql://$(AZURE_POSTGRESQL_USER):$(AZURE_POSTGRESQL_PASSWORD)@$(AZURE_POSTGRESQL_HOST):$(AZURE_POSTGRESQL_PORT)/$(AZURE_POSTGRESQL_DATABASE)?sslmode=require"
                      -FINNHUB_API_KEY "$(FINNHUB_API_KEY)"
