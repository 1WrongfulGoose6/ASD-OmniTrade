trigger:
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: CI
    displayName: 'Continuous Integration'
    jobs:
      - job: Lint
        displayName: 'Lint Code'
        steps:
          - task: UseNode@1
            inputs:
              version: '18.x'
            displayName: 'Use Node.js 18.x'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Prisma Client'
            inputs:
              key: 'prisma | "$(Agent.OS)" | prisma/schema.prisma'
              path: 'node_modules/.prisma'
              cacheHitVar: 'PRISMA_CACHE_RESTORED'

          - script: npm install
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'
            condition: ne(variables.PRISMA_CACHE_RESTORED, 'true')

          - script: npm run lint
            displayName: 'Run ESLint'

      - job: Test
        displayName: 'Run Tests'
        steps:
          - task: UseNode@1
            inputs:
              version: '18.x'
            displayName: 'Use Node.js 18.x'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Prisma Client'
            inputs:
              key: 'prisma | "$(Agent.OS)" | prisma/schema.prisma'
              path: 'node_modules/.prisma'
              cacheHitVar: 'PRISMA_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Jest Coverage'
            inputs:
              key: 'jest-coverage | "$(Agent.OS)" | package-lock.json | $(Build.SourcesDirectory)/src/**'
              restoreKeys: |
                jest-coverage | "$(Agent.OS)" | package-lock.json
                jest-coverage | "$(Agent.OS)"
              path: 'coverage'
              cacheHitVar: 'COVERAGE_CACHE_RESTORED'

          - script: npm install
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'
            condition: ne(variables.PRISMA_CACHE_RESTORED, 'true')

          - script: npx prisma db push
            displayName: 'Set up Database Schema'

          - script: npx playwright install --with-deps chromium
            displayName: 'Install Playwright Chromium Browser'

          - script: npm run test:coverage
            displayName: 'Run Jest Tests with Coverage (CI)'
            env:
              CI: true

          - script: npm run test:e2e:ci
            displayName: 'Run Playwright E2E Tests (CI)'
            env:
              CI: true

          - task: PublishTestResults@2
            displayName: 'Publish Jest Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/**/*.xml'
              failTaskOnFailedTests: true

          - task: PublishTestResults@2
            displayName: 'Publish Playwright Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/**/*.xml'
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Code Coverage Results'
            inputs:
              summaryFileLocation: 'coverage/cobertura-coverage.xml'
              pathToSources: 'src/'
              reportDirectory: 'coverage'
              failIfCoverageEmpty: false

      - job: Build
        displayName: 'Build Application'
        dependsOn:
          - Lint
          - Test
        steps:
          - task: UseNode@1
            inputs:
              version: '18.x'
            displayName: 'Use Node.js 18.x'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Prisma Client'
            inputs:
              key: 'prisma | "$(Agent.OS)" | prisma/schema.prisma'
              path: 'node_modules/.prisma'
              cacheHitVar: 'PRISMA_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Next.js Build'
            inputs:
              key: 'nextjs | "$(Agent.OS)" | package-lock.json | next.config.mjs | $(Build.SourcesDirectory)/src/**'
              restoreKeys: |
                nextjs | "$(Agent.OS)" | package-lock.json | next.config.mjs
                nextjs | "$(Agent.OS)" | package-lock.json
                nextjs | "$(Agent.OS)"
              path: '.next/cache'
              cacheHitVar: 'NEXTJS_CACHE_RESTORED'

          - script: npm install
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'
            condition: ne(variables.PRISMA_CACHE_RESTORED, 'true')

          - script: npx prisma db push
            displayName: 'Set up Database Schema'

          - script: mkdir -p .next/cache
            displayName: 'Ensure Next.js Cache Directory Exists'

          - script: |
              echo "Next.js cache restored: $(NEXTJS_CACHE_RESTORED)"
              ls -la .next/cache || echo "Cache directory is empty"
            displayName: 'Display Cache Status'

          - script: npm run build
            displayName: 'Build React App'

          - task: CopyFiles@2
            displayName: 'Copy Files to Artifact Staging Directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: |
                .next/**
                !.next/cache/**
                public/**
                package.json
                next.config.mjs
                prisma/**
                coverage/**
                .env
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: WebApp'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'WebApp'
              publishLocation: 'Container'

  # Deploy to Azure App Service
  - stage: Deploy
    displayName: 'Deploy to Azure App Service'
    dependsOn: CI
    jobs:
      - deployment: DeployWeb
        displayName: 'Deploy Web App to Azure'
        environment: 'production'
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: WebApp
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: 'OmniTrade Connection'
                    appType: 'webAppLinux'
                    appName: 'OmniTrade'
                    resourceGroupName: 'OmniTrade'
                    package: '$(Pipeline.Workspace)/WebApp'
                    runtimeStack: 'NODE|18-lts'