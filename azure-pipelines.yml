## Author: Ali Bonagdaran

trigger:
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '18.x'
  
stages:
  - stage: CI
    displayName: 'Continuous Integration'
    jobs:
      - job: Setup
        displayName: 'Setup Dependencies'
        steps:
          - task: UseNode@1
            inputs:
              version: $(nodeVersion)
            displayName: 'Use Node.js $(nodeVersion)'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - script: npm ci
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'

          - script: npx prisma db push
            displayName: 'Set up Database Schema'

      - job: QualityChecks
        displayName: 'Quality Checks'
        dependsOn: Setup
        strategy:
          matrix:
            Lint:
              testType: 'lint'
              command: 'npm run lint'
            UnitTest:
              testType: 'unit'
              command: 'npm run test:coverage'
            E2ETest:
              testType: 'e2e'
              command: 'npm run test:e2e:ci'
        steps:
          - task: UseNode@1
            inputs:
              version: $(nodeVersion)

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: 'node_modules'

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env

          - script: npx prisma generate

          - script: npx playwright install --with-deps chromium
            condition: eq(variables['testType'], 'e2e')

          - script: $(command)
            displayName: 'Run $(testType)'
            env:
              CI: true

          - task: PublishTestResults@2
            condition: in(variables['testType'], 'unit', 'e2e')
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/**/*.xml'

          - task: PublishCodeCoverageResults@2
            condition: eq(variables['testType'], 'unit')
            inputs:
              summaryFileLocation: 'coverage/cobertura-coverage.xml'
              pathToSources: 'src/'

      - job: Build
        displayName: 'Build Application'
        dependsOn: QualityChecks
        steps:
          - task: UseNode@1
            inputs:
              version: $(nodeVersion)

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: 'node_modules'

          - task: Cache@2
            inputs:
              key: 'nextjs | "$(Agent.OS)" | package-lock.json | $(Build.SourceVersion)'
              path: '.next/cache'

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env

          - script: npx prisma generate

          - script: npm run build
            displayName: 'Build Application'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
              artifactName: 'WebApp'
              publishLocation: 'pipeline'

  - stage: Deploy
    displayName: 'Deploy to Production'
    dependsOn: CI
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - deployment: Production
        displayName: 'Deploy to Azure App Service'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'OmniTrade Connection'
                    appType: 'webAppLinux'
                    appName: 'OmniTrade'
                    package: '$(Pipeline.Workspace)/WebApp'
                    runtimeStack: 'NODE|18-lts'