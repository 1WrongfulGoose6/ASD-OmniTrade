trigger:
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: CI
    displayName: 'Continuous Integration'
    jobs:
      - job: Lint
        displayName: 'Lint Code'
        steps:
          - task: UseNode@1
            inputs:
              version: '18.x'
            displayName: 'Use Node.js 18.x'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Prisma Client'
            inputs:
              key: 'prisma | "$(Agent.OS)" | prisma/schema.prisma'
              path: 'node_modules/.prisma'
              cacheHitVar: 'PRISMA_CACHE_RESTORED'

          - script: npm install
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'
            condition: ne(variables.PRISMA_CACHE_RESTORED, 'true')

          - script: npm run lint
            displayName: 'Run ESLint'

      - job: Test
        displayName: 'Run Tests'
        steps:
          - task: UseNode@1
            inputs:
              version: '18.x'
            displayName: 'Use Node.js 18.x'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Prisma Client'
            inputs:
              key: 'prisma | "$(Agent.OS)" | prisma/schema.prisma'
              path: 'node_modules/.prisma'
              cacheHitVar: 'PRISMA_CACHE_RESTORED'

          - script: npm install
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'
            condition: ne(variables.PRISMA_CACHE_RESTORED, 'true')

          - script: npx prisma db push
            displayName: 'Set up Database Schema'

          - script: npx playwright install --with-deps
            displayName: 'Install Playwright Browsers'

          - script: npm run test:ci
            displayName: 'Run Jest Tests (CI)'

          - script: npm run test:e2e
            displayName: 'Run Playwright E2E Tests'

          - task: PublishTestResults@2
            displayName: 'Publish Jest Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/**/*.xml'
              failTaskOnFailedTests: true

          - task: PublishTestResults@2
            displayName: 'Publish Playwright Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'test-results/**/*.xml'
              failTaskOnFailedTests: true

      - job: Build
        displayName: 'Build Application'
        dependsOn:
          - Lint
          - Test
        steps:
          - task: UseNode@1
            inputs:
              version: '18.x'
            displayName: 'Use Node.js 18.x'

          - task: Cache@2
            displayName: 'Cache node_modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package.json'
              path: 'node_modules'
              cacheHitVar: 'NPM_CACHE_RESTORED'

          - task: Cache@2
            displayName: 'Cache Prisma Client'
            inputs:
              key: 'prisma | "$(Agent.OS)" | prisma/schema.prisma'
              path: 'node_modules/.prisma'
              cacheHitVar: 'PRISMA_CACHE_RESTORED'

          - script: npm install
            displayName: 'Install Dependencies'
            condition: ne(variables.NPM_CACHE_RESTORED, 'true')

          - script: |
              echo "FINNHUB_API_KEY=d313k2hr01qnu2r0cfkgd313k2hr01qnu2r0cfl0" > .env
              echo 'DATABASE_URL="file:./prisma/omni.db"' >> .env
            displayName: 'Set up Environment Variables'

          - script: npx prisma generate
            displayName: 'Generate Prisma Client'
            condition: ne(variables.PRISMA_CACHE_RESTORED, 'true')

          - script: npx prisma db push
            displayName: 'Set up Database Schema'

          - script: npm run build
            displayName: 'Build React App'

          - task: CopyFiles@2
            displayName: 'Copy Files to Artifact Staging Directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: |
                .next/**
                public/**
                package.json
                next.config.mjs
                prisma/**
                .env
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: WebApp'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'WebApp'
              publishLocation: 'Container'